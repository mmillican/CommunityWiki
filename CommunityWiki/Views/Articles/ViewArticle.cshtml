@using CommunityWiki.Entities.Articles
@model CommunityWiki.Models.Articles.ArticleViewModel
@{
    ViewData.SetPageTitle(Model.Title);
    ViewData.SetSubTitle(Model.ArticleTypeName);
}

<div class="row" id="article">
    <div class="col-md-9 main-content">
        <div class="article-body">
            @if (Model.Fields.Any())
            {
                <dl class="dl-horizontal">
                    @foreach(var field in Model.Fields)
                    {
                        <dt style="text-align: left; margin-bottom: 10px;">@field.Name</dt>
                        <dd>@field.Value</dd>
                    }
                </dl>
            }

            @Html.Raw(Model.Body)

            @if (Model.IsLoggedIn)
            {
                <div class="actions article-actions">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-default"><span class="glyphicon glyphicon-pencil"></span> Edit</a>

                    <button id="btn-flag-article" type="button" class="btn btn-default btn-flag-article" title="Report this this article" data-toggle="modal" data-target="#article-flag-modal"><span class="glyphicon glyphicon-flag"></span> Report</button>
                </div>
            }
        </div>
    </div>
    <div class="col-md-3 sidebar">
        @if (Model.IsLoggedIn)
        {
            if (Model.ArticlesConfig.EnableVoting)
            {
                <div class="article-voting visible-md visible-lg">
                    <ul class="list-inline">
                        <li>
                            <h3 class="article-score">{{ article.score }}</h3>
                        </li>
                        <li>
                            <button v-bind:class="[ { 'btn-success': voting.userHasUpVoted, 'btn-default': !voting.userHasUpVoted } ,'btn btn-vote vote-up' ]" v-on:click="vote('UpVote')">
                                <span class="glyphicon glyphicon-thumbs-up"></span>
                                <span class="count">{{ voting.upVoteCount }}</span>
                            </button>
                        </li>
                        <li>
                            <a href="#" v-bind:class="[ { 'btn-danger': voting.userHasDownVoted, 'btn-default': !voting.userHasDownVoted }, 'btn btn-default btn-vote vote-down' ]" v-on:click="vote('DownVote')">
                                <span class="glyphicon glyphicon-thumbs-down"></span>
                                <span class="count">{{ voting.downVoteCount }}</span>
                            </a>
                        </li>
                    </ul>
                </div>
            }

            <div class="article-status-labels visible-md visible-lg">
                <article-status Article="Model" />
            </div>

            <hr />
            <h4>Revisions (@Model.RevisionCount)</h4>

            <table class="table table-condensed table-striped revisions">
                <tr>
                    <th style="width: 10%">Date</th>
                    <th style="width: 10%"></th>
                </tr>
                @{ 
                    var maxRevisionDisplayCount = 5;
                }
                @foreach (var rev in Model.Revisions.Take(maxRevisionDisplayCount))
                {
                    <tr title="@rev.Comment by @rev.RevisionUserName">
                        <td>@rev.RevisionDate.ToString("d")</td>
                        <td><a asp-action="CompareRevision" asp-route-articleId="@Model.Id" asp-route-revisionId="@rev.Id">Compare</a></td>
                    </tr>
                }
                @if (Model.RevisionCount > maxRevisionDisplayCount)
                {
                    <tr>
                        <td colspan="2"><i>@(Model.RevisionCount - maxRevisionDisplayCount) more revisions...</i></td>
                    </tr>
                }
            </table>
        }
        else
        {
            <div class="alert alert-info">
                Sign in to vote, edit and view revision history.
            </div>

        }
    </div>



    @if (Model.IsLoggedIn)
    {
        <div id="article-flag-modal" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <form v-on:submit.prevent="flag" class="modal-body">
                    <div class="modal-content">
                        <div class="modal-header">
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                            <h4 class="modal-title">Flag this article...</h4>
                        </div>
                        <div class="modal-body">
                            <div id="flag-article-modal-notices"></div>

                            <ul class="list-unstyled article-flag-options">
                                <li>
                                    <input type="radio" id="Flagging_Type_Spam" v-model="flagging.type" value="@VoteType.Spam" /> <label for="Flagging_Type_Spam" class="flag-reason">Spam</label><br />
                                    <span class="flag-description">This is spam and provides no value to the community beyond a commercial purpose</span>
                                </li>
                                <li>
                                    <input type="radio" id="Flagging_Type_InvalidSources" v-model="flagging.type" value="@VoteType.InvalidSources" /> <label for="Flagging_Type_InvalidSources" class="flag-reason">Invalid sources</label><br />
                                    <span class="flag-description">This article has sources, but one or more of them are invalid</span>
                                </li>
                                <li>
                                    <input type="radio" id="Flagging_Type_Plagiarism" v-model="flagging.type" value="@VoteType.Plagiarism" /> <label for="Flagging_Type_Plagiarism" class="flag-reason">Plagiarism</label><br />
                                    <span class="flag-description">This article has been plagiarized in full or in part</span>
                                </li>
                                <li>
                                    <input type="radio" id="Flagging_Type_NotHelpful" v-model="flagging.type" value="@VoteType.NotHelpful" /> <label for="Flagging_Type_NotHelpful" class="flag-reason">Not helpful</label><br />
                                    <span class="flag-description">This article provides no value to the community</span>
                                </li>
                                <li>
                                    <input type="radio" id="Flagging_Type_Offensive" v-model="flagging.type" value="@VoteType.Offensive" /> <label for="Flagging_Type_Offensive" class="flag-reason">Offensive</label><br />
                                    <span class="flag-description">This article is offensive to a user in this community, a specific person (not in the community), or a group of people</span>
                                </li>
                                <li>
                                    <input type="radio" id="Flagging_Type_NeedsReview" v-model="flagging.type" value="@VoteType.NeedsReview" /> <label for="Flagging_Type_NeedsReview" class="flag-reason">Needs review</label><br />
                                    <span class="flag-description">The content in this article is in need of review</span>
                                </li>
                                <li>
                                    <input type="radio" id="Flagging_Type_Deletion" v-model="flagging.type" value="@VoteType.Deletion" /> <label for="Flagging_Type_Deletion" class="flag-reason">Delete article</label><br />
                                    <span class="flag-description">Flag this article to have it deleted from  the site.  This should only be used when action by another flag is not sufficient.</span>
                                </li>
                            </ul>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                            <button type="submit" id="btn-submit-flag" class="btn btn-primary">Submit</button>
                        </div>
                    </div><!-- /.modal-content -->
                </form>
            </div><!-- /.modal-dialog -->
        </div><!-- /.modal -->
    }
</div>

@section scripts
{
    <partial name="_VueScripts" />
    <script>
        var articleApp = new Vue({
            el: '#article',
            data: {
                isLoggedIn: @Model.IsLoggedIn.ToJsBoolean(),
                article: {
                    id: @Model.Id,
                    typeId: @Model.ArticleTypeId,
                    title: '@Model.Title',
                    slug: '@Model.Slug',
                    viewCount: @Model.ViewCount,
                    revisionCount: @Model.RevisionCount,
                    isFlaggedForReview: @Model.IsFlaggedForReview.ToJsBoolean(),
                    isFlaggedForDeletion: @Model.IsFlaggedForDeletion.ToJsBoolean(),
                    score: @Model.Score
                },
                voting: {
                    userCanVote: @Model.Voting.UserCanVote.ToJsBoolean(),
                    userHasVoted: @Model.Voting.UserHasVoted.ToJsBoolean(),
                    userHasUpVoted: @Model.Voting.UserHasUpVoted.ToJsBoolean(),
                    userHasDownVoted: @Model.Voting.UserHasDownVoted.ToJsBoolean(),
                    upVoteCount: @Model.Voting.UpVoteCount,
                    downVoteCount: @Model.Voting.DownVoteCount,
                    test: 'test'
                },
                flagging: {
                    type: null
                }
            },
            methods: {
                vote: function (voteType) {

                    if (!this.voting.userCanVote) {
                        return;
                    }

                    if (!this.voting.userHasVoted) {
                        this.addVote(voteType);
                    } else {
                        this.removeVote(voteType);
                    }
                },
                addVote: function (voteType) {
                    var self = this;
                    var data = {
                        articleId: self.article.id,
                        voteType: voteType
                    };

                    var xhr = new XMLHttpRequest();                    
                    xhr.open('POST', '@Url.Action("Create", "Votes")');
                    xhr.setRequestHeader('Content-Type', 'application/json');

                    xhr.onload = function () {
                        if (xhr.readyState === xhr.DONE && xhr.status === 201) {
                            var resp = JSON.parse(xhr.response);

                            self.article.score = resp.score;
                            self.voting.userHasVoted = true;

                            if (voteType === 'UpVote') {
                                self.voting.upVoteCount = resp.voteCount;
                                self.voting.userHasUpVoted = true;
                            }
                            else if (voteType === 'DownVote') {
                                self.voting.downVoteCount = resp.voteCount;
                                self.voting.userHasDownVoted = true;
                            }
                        }
                    };

                    xhr.send(JSON.stringify(data));
                },
                removeVote: function (voteType) {
                    var self = this;
                    var data = {
                        articleId: self.article.id,
                        voteType: voteType
                    };

                    var xhr = new XMLHttpRequest();
                    xhr.open('DELETE', '@Url.Action("Create", "Votes")');
                    xhr.setRequestHeader('Content-Type', 'application/json');

                    xhr.onload = function () {
                        if (xhr.readyState === xhr.DONE && xhr.status === 200) {
                            var resp = JSON.parse(xhr.response);

                            self.article.score = resp.score;
                            self.voting.userHasVoted = false;

                            var resp = JSON.parse(xhr.response);

                            if (voteType === 'UpVote') {
                                self.voting.upVoteCount = resp.voteCount;
                                self.voting.userHasUpVoted = false;
                            }
                            else if (voteType === 'DownVote') {
                                self.voting.downVoteCount = resp.voteCount;
                                self.voting.userHasDownVoted = false;
                            }
                        }
                    };

                    xhr.send(JSON.stringify(data));
                },
                flag: function () {
                    var self = this;
                    var data = {
                        articleId: self.article.id,
                        voteType: self.flagging.type
                    };
                    
                    var xhr = new XMLHttpRequest();
                    xhr.open('POST', '@Url.Action("Create", "Votes")');
                    xhr.setRequestHeader('Content-Type', 'application/json');

                    xhr.onload = function () {
                        if (xhr.readyState === xhr.DONE && xhr.status === 201) {
                            // Yup, shouldn't use jQuery here...
                            $('#article-flag-modal').modal('hide');
                            wiki.notices.addSuccess('Your flag has been recorded.  Thanks for helping tidy up.')
                        } else if (xhr.readyState === xhr.DONE) {
                            wiki.notices.addError('There was an error recording your flag.  Please try again.', $('#flag-article-modal-notices'), 0);
                        }
                    };

                    xhr.send(JSON.stringify(data));
                }
            }
        });
    </script>
}