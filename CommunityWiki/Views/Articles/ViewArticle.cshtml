@using CommunityWiki.Entities.Articles
@model CommunityWiki.Models.Articles.ArticleViewModel
@{
    ViewData["Title"] = $"{Model.ArticleTypeName}: {Model.Title}";
}

<div class="row">
    <div class="col-md-9 main-content">
        <div class="article-body">
            @Html.Raw(Model.Body)

            @if (Model.IsLoggedIn)
            {
                <div class="actions article-actions">
                    <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-default"><span class="glyphicon glyphicon-pencil"></span> Edit</a>

                    <button id="btn-flag-article" type="button" class="btn btn-default btn-flag-article" title="Report this this article" data-toggle="modal" data-target="#article-flag-modal"><span class="glyphicon glyphicon-flag"></span> Report</button>
                </div>
            }
        </div>
    </div>
    <div class="col-md-3 sidebar">
        @if (Model.IsLoggedIn)
        {
            <div class="article-voting visible-md visible-lg">
                <ul class="list-inline">
                    @*<li>
                        <h3 class="article-score">@Model.Score</h3>
                    </li>*@
                    <li>
                        <a href="#" class="btn btn-default btn-vote vote-up" data-vote-type="UpVote">
                            <span class="glyphicon glyphicon-thumbs-up @(Model.Voting.UserHasUpVoted ? "voted text-success" : "")"></span>
                            <span class="count">@Model.Voting.UpVoteCount</span>
                        </a>
                    </li>
                    <li>
                        <a href="#" class="btn btn-default btn-vote vote-down" data-vote-type="DownVote">
                            <span class="glyphicon glyphicon-thumbs-down @(Model.Voting.UserHasDownVoted ? "voted text-danger" : "")"></span>
                            <span class="count">@Model.Voting.DownVoteCount</span>
                        </a>
                    </li>
                </ul>
            </div>

            <div class="article-status-labels visible-md visible-lg">
                <article-status Article="Model" />
            </div>
        
            <hr />
            <h4>Revisions (@Model.RevisionCount)</h4>

            <table class="table table-condensed table-striped revisions">
                <tr>
                    <th style="width: 10%">Date</th>
                    <th style="width: 10%"></th>
                </tr>
                @foreach (var rev in Model.Revisions)
                {
                    <tr title="@rev.Comment by @rev.RevisionUserName">
                        <td>@rev.RevisionDate.ToString("d")</td>
                        <td><a asp-action="CompareRevision" asp-route-articleId="@Model.Id" asp-route-revisionId="@rev.Id">Compare</a></td>
                    </tr>
                }
            </table>
        }
        else
        {
            <div class="alert alert-info">
                Sign in to vote, edit and view revision history.
            </div>

        }
    </div>

</div>


@if (Model.IsLoggedIn)
{
    <div id="article-flag-modal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Flag this article...</h4>
                </div>
                <div class="modal-body">
                    <div id="flag-article-modal-notices"></div>

                    <ul class="list-unstyled article-flag-options">
                        <li>
                            <input type="radio" id="Flagging_Type_Spam" asp-for="Flagging.Type" value="@VoteType.Spam" /> <label for="Flagging_Type_Spam" class="flag-reason">Spam</label><br />
                            <span class="flag-description">This is spam and provides no value to the community beyond a commercial purpose</span>
                        </li>
                        <li>
                            <input type="radio" id="Flagging_Type_InvalidSources" asp-for="Flagging.Type" value="@VoteType.InvalidSources" /> <label for="Flagging_Type_InvalidSources" class="flag-reason">Invalid sources</label><br />
                            <span class="flag-description">This article has sources, but one or more of them are invalid</span>
                        </li>
                        <li>
                            <input type="radio" id="Flagging_Type_Plagiarism" asp-for="Flagging.Type" value="@VoteType.Plagiarism" /> <label for="Flagging_Type_Plagiarism" class="flag-reason">Plagiarism</label><br />
                            <span class="flag-description">This article has been plagiarized in full or in part</span>
                        </li>
                        <li>
                            <input type="radio" id="Flagging_Type_NotHelpful" asp-for="Flagging.Type" value="@VoteType.NotHelpful" /> <label for="Flagging_Type_NotHelpful" class="flag-reason">Not helpful</label><br />
                            <span class="flag-description">This article provides no value to the community</span>
                        </li>
                        <li>
                            <input type="radio" id="Flagging_Type_Offensive" asp-for="Flagging.Type" value="@VoteType.Offensive" /> <label for="Flagging_Type_Offensive" class="flag-reason">Offensive</label><br />
                            <span class="flag-description">This article is offensive to a user in this community, a specific person (not in the community), or a group of people</span>
                        </li>
                        <li>
                            <input type="radio" id="Flagging_Type_NeedsReview" asp-for="Flagging.Type" value="@VoteType.NeedsReview" /> <label for="Flagging_Type_NeedsReview" class="flag-reason">Needs review</label><br />
                            <span class="flag-description">The content in this article is in need of review</span>
                        </li>
                        <li>
                            <input type="radio" id="Flagging_Type_Deletion" asp-for="Flagging.Type" value="@VoteType.Deletion" /> <label for="Flagging_Type_Deletion" class="flag-reason">Delete article</label><br />
                            <span class="flag-description">Flag this article to have it deleted from  the site.  This should only be used when action by another flag is not sufficient.</span>
                        </li>
                    </ul>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                    <button type="button" id="btn-submit-flag" class="btn btn-primary">Submit</button>
                </div>
            </div><!-- /.modal-content -->
        </div><!-- /.modal-dialog -->
    </div><!-- /.modal -->
}

@section scripts
{
    <script>
        $(document).ready(function () {
            var $flagModal = $('#article-flag-modal');

            $('#btn-submit-flag').on('click', function (e) {
                e.preventDefault();

                var flagData = {
                    articleId: @Model.Id,
                    voteType: $('input[name="Flagging.Type"]:checked').val()
                };

                $.ajax({
                    url: '@Url.Action("Create", "Votes")',
                    type: 'POST',
                    data: flagData,
                    success: function (result) {
                        console.log(result);

                        $flagModal.modal('hide');
                        wiki.notices.addSuccess('Your flag has been recorded.  Thanks for helping tidy up.')
                    },
                    error: function () {
                        console.log('error creating vote');

                        wiki.notices.addError('There was an error recording your flag.  Please try again.', $('#flag-article-modal-notices'), 0);
                    }
                });
            })

            var votingData = @(Html.Raw(Model.Voting.Serialize()));

            $(document).on('click', '.btn-vote', function (e) {
                e.preventDefault();

                if (!votingData.userCanVote) {
                    return;
                }

                var $btn = $(this),
                    $btnIcon = $(this).find('.glyphicon'),
                    $btnCount = $(this).find('.count'),
                    $spnArticleScore = $('.article-score'),
                    voteType = $btn.data('voteType');

                if (!votingData.userHasVoted) {
                    var data = {
                        articleId: @Model.Id,
                        voteType: voteType
                    };

                    $.ajax({
                        url: '@Url.Action("Create", "Votes")',
                        type: 'POST',
                        data: data,
                        success: function (result) {
                            $spnArticleScore.text(result.score);
                            votingData.userHasVoted = true;
                            $btnCount.text(result.voteCount);

                            if (voteType === 'UpVote') {
                                $btnIcon.addClass('text-success');
                                votingData.userHasUpVoted = true;
                                
                            } else if(voteType === 'DownVote'){
                                $btnIcon.addClass('text-danger');
                                votingData.userHasDownVoted = true;
                            }
                        }
                    });
                } else if ((voteType === 'UpVote' && votingData.userHasUpVoted) || (voteType === 'DownVote' && votingData.userHasDownVoted)) {
                    $.ajax({
                        url: '@Url.Action("Delete", "Votes")',
                        type: 'DELETE',
                        data: {
                            articleId: @Model.Id,
                            voteType: voteType
                        },
                        success: function (result) {
                            console.log(result);
                            $btnIcon.removeClass('text-success text-danger');
                            $spnArticleScore.text(result.score);
                            $btnCount.text(result.voteCount);
                            votingData.userHasVoted = false;
                            votingData.userHasUpVoted = false;
                            votingData.userHasDownVoted = false;
                        }

                    })
                }
            });
        });
    </script>
}